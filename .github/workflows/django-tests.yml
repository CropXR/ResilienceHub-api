
name: Django Tests
permissions:
  contents: read

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.12']
    
    # Maybe in the future use postgres, for now sqlite is fine    
    #services:
    #  # If your Django app uses PostgreSQL
    #  postgres:
    #    image: postgres:13
    #    env:
    #      POSTGRES_USER: postgres
    #      POSTGRES_PASSWORD: postgres
    #      POSTGRES_DB: github_actions
    #    ports:
    #      - 5432:5432
    #    # Health checks to ensure postgres is ready before running tests
    #    options: >-
    #      --health-cmd pg_isready
    #      --health-interval 10s
    #      --health-timeout 5s
    #      --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Optional: Use cache to speed up pip installs
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Run Migrations
      run: python manage.py migrate
      
    - name: Run Tests
      run: |
        python manage.py test
        
    # Optional: Add code coverage reporting
    - name: Generate Coverage Report
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage xml
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false